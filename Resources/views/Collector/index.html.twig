{% extends 'WebProfilerBundle:Profiler:layout.html.twig' %}

{% block toolbar %}
    {% set icon %}

    {% endset %}
    {% set text %}
        {% spaceless %}
            <span>Toto</span>
        {% endspaceless %}
    {% endset %}
    {% include 'WebProfilerBundle:Profiler:toolbar_item.html.twig' with { 'link': profiler_url } %}
{% endblock %}

{% block menu %}
    <span class="label">
    <span class="icon">

    </span>
    <strong>CONTAINER</strong>
    <span class="count">
        <span>{{ collector.name }}</span>
    </span>
</span>
{% endblock %}

{% block panel %}
    <div id="container_explorer"></div>
    <script src="http://d3js.org/d3.v2.min.js"></script>
    <script type="text/javascript">
        (function() {
            packages = {
                // Lazily construct the package hierarchy from class names.
                root: function(classes) {
                  var map = {};

                  function find(name, data) {
                    var node = map[name], i;
                    if (!node) {
                      node = map[name] = data || {name: name, children: []};
                      if (name.length) {
                        node.parent = find(name.substring(0, i = name.lastIndexOf(".")));
                        node.parent.children.push(node);
                        node.key = name.substring(i + 1);
                      }
                    }
                    return node;
                  }

                  classes.forEach(function(d) {
                    find(d.name, d);
                  });

                  return map[""];
                },

                // Return a list of imports for the given array of nodes.
                imports: function(nodes) {
                  var map = {},
                      imports = [];

                  // Compute a map from name to node.
                  nodes.forEach(function(d) {
                    map[d.name] = d;
                  });

                  // For each import, construct a link from the source to target node.
                  nodes.forEach(function(d) {
                    if (d.children) d.children.forEach(function(i) {
                      imports.push({source: map[d.name], target: map[i]});
                    });
                  });

                  return imports;
                }
            };
        })();

        var diameter = 960,
            radius = diameter / 2,
            innerRadius = radius - 120;

        var cluster = d3.layout.cluster()
            .size([360, innerRadius])
            .sort(null)
            .value(function(d) { return d.size; });

        var bundle = d3.layout.bundle().;

        var line = d3.svg.line.radial()
            .interpolate("bundle")
            .tension(.85)
            .radius(function(d) { return d.y; })
            .angle(function(d) { return d.x / 180 * Math.PI; })
        ;

        var svg = d3.select("#container_explorer").append("svg")
            .attr("width", diameter)
            .attr("height", diameter)
          .append("g")
            .attr("transform", "translate(" + radius + "," + radius + ")")
        ;

        d3.json("/app_dev.php/_container_json", function(classes) {
            console.log(classes);
            var nodes = cluster.nodes(classes), //cluster.nodes(packages.root(classes)),
                links = packages.imports(nodes),
                splines = bundle(links);
console.log(nodes);
            var path = svg.selectAll("path.link")
                .data(links)
              .enter().append("svg:path")
                .attr("class", function(d) { return "link source-" + d.source.key + " target-" + d.target.key; })
                .attr("d", function(d, i) { return line(splines[i]); });

            svg.selectAll("g.node")
                .data(nodes.filter(function(n) { return !n.children; }))
              .enter().append("svg:g")
                .attr("class", "node")
                .attr("id", function(d) { return "node-" + d.key; })
                .attr("transform", function(d) { return "rotate(" + (d.x - 90) + ")translate(" + d.y + ")"; })
              .append("svg:text")
                .attr("dx", function(d) { return d.x < 180 ? 8 : -8; })
                .attr("dy", ".31em")
                .attr("text-anchor", function(d) { return d.x < 180 ? "start" : "end"; })
                .attr("transform", function(d) { return d.x < 180 ? null : "rotate(180)"; })
                .text(function(d, i) { return i; })
                //.on("mouseover", mouseover)
                //.on("mouseout", mouseout)
            ;

            d3.select("input[type=range]").on("change", function() {
                line.tension(this.value / 100);
                path.attr("d", function(d, i) { return line(splines[i]); });
            });
        });
    </script>
{% endblock %}
