{% extends 'WebProfilerBundle:Profiler:layout.html.twig' %}

{% block toolbar %}
    {% set icon %}

    {% endset %}
    {% set text %}
        {% spaceless %}
            <span>Toto</span>
        {% endspaceless %}
    {% endset %}
    {% include 'WebProfilerBundle:Profiler:toolbar_item.html.twig' with { 'link': profiler_url } %}
{% endblock %}

{% block menu %}
    <span class="label">
    <span class="icon">

    </span>
    <strong>CONTAINER</strong>
    <span class="count">
        <span>{{ collector.name }}</span>
    </span>
</span>
{% endblock %}

{% block panel %}
    <script src="http://d3js.org/d3.v2.min.js"></script>
    <script type="text/javascript">
        d3.json("/app_dev.php/_container_json", function(classes) {
            var nodes = cluster.nodes(packages.root(classes)),
                links = packages.imports(nodes),
                splines = bundle(links);

            var path = svg.selectAll("path.link")
                .data(links)
              .enter().append("svg:path")
                .attr("class", function(d) { return "link source-" + d.source.key + " target-" + d.target.key; })
                .attr("d", function(d, i) { return line(splines[i]); });

            svg.selectAll("g.node")
                .data(nodes.filter(function(n) { return !n.children; }))
              .enter().append("svg:g")
                .attr("class", "node")
                .attr("id", function(d) { return "node-" + d.key; })
                .attr("transform", function(d) { return "rotate(" + (d.x - 90) + ")translate(" + d.y + ")"; })
              .append("svg:text")
                .attr("dx", function(d) { return d.x < 180 ? 8 : -8; })
                .attr("dy", ".31em")
                .attr("text-anchor", function(d) { return d.x < 180 ? "start" : "end"; })
                .attr("transform", function(d) { return d.x < 180 ? null : "rotate(180)"; })
                .text(function(d) { return d.key; })
                .on("mouseover", mouseover)
                .on("mouseout", mouseout)
            ;

            d3.select("input[type=range]").on("change", function() {
                line.tension(this.value / 100);
                path.attr("d", function(d, i) { return line(splines[i]); });
            });
        });
    </script>
{% endblock %}
